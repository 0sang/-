객체지향 프로그래밍 설계 시 5가지 원칙(SOLID)

1. SRP(Single Responsibility Principle): 단일 책임 원칙 - 한 클래스는 하나의 책임만
  모든 클래스는 각각 단 하나의 책임만 가져야 하며, 수정할 이유는 한가지여야 한다.
  즉, 클래스는 그 책임을 완전히 캡슐화해야 함을 말한다.
    
    * 캡슐화 : 객체지향의 특징 중 하나로 객체(클래스)의 내부 변수와 메소드를 하나로 패키징 하는 것이다.
        -> 모듈은 자신의 외부 API를 통해서만 다른 모듈과 상호작용(통신, 메세지 교환)하며 자신의 내부 모듈은 감추고, 다른 모듈의 내부 작업에도 직접적으로 개입하지 않도록 설계
      캡슐화와 비슷한 개념으로 정보 은닉이라는 것이 있는데, 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도하는 것이다.
      
      이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향, 모듈단위의 재사용이 용이하게 된다.
      여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. -> 간편한 유지보수
      
      캡슐화의 예제 : 접근제어자
       - public : 다른 객체에서 해당 객체의 인스턴스를 생성하여 접근할 수 있다.
       - protected : 해당 객체를 상속받은 객체 내부에서 접근할 수 있다. 단순 인스턴스에선 접근 불가능
       - default : 동일한 패키지 내의 객체에서 인스턴스를 생성하여 접근할 수 있다.
       - private : 선언된 객체 내부에서만 사용이 가능하며 외부에서는 어떠한 방법으로든 해당 지시자를 가진 변수 혹은 메소드를 사용할 수 없다.
       
2. OCP(Open-Closed Principle): 개방-폐쇄 원칙 - 확장에는 열려있고 변경에는 닫혀있어야 한다.
  소프트웨어의 구성요소(컴포넌트, 클래스, 모듈, 함수)는 확장에는 열려있어야 하지만 변경에는 폐쇄적이어야 한다. 즉, 기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계한다.
  개방-폐쇄  원칙을 적용하기 위해서는 추상화와 다형성이 중요하게 여겨진다.
  
    * 추상화 : 객체들의 공통 속성과 행위를 추출하는 것
      ex) 각 객체 물고기, 사자, 토끼, 독수리 가 있다면 동물 또는 생물이라는 추상적인 객체로 묶는 행위

    * 다형성 : 부모 클래스에서 상속받은 메서드를 같은 이름으로 다른 동작을 하는 것(오버라이드)
      ex) 배를훔치다() 는 자식 클래스에서 재정의에 따라 과일 배가 될 수도 선박이 될 수도 있음
      
3. LSP(Liskov Substitution Principle): 리스코프 치환 원칙 - 서브 타입은 언제나 자신의 기반 타입으로 변경할 수 있어야 한다.
  상위 타입은 항상 하위 타입으로 대체할 수 있어야 함을 의미
  즉, 부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 역할을 하는데 문제가 없어야 한다.
  
4. ISP(Interface Segregation Principle): 인터페이스 분리 원칙 - 하나의 일반적인 인터페이스보다 여러 개의 구체적인 인터페이스가 낫다.
  인터페이스 분리 원칙은 객체가 반드시 필요한 기능만을 가지도록 제한하는 원칙이다. 불필요한 기능의 상속/구현을 최대한 방지함으로써 객체의 불필요한 책임을 제거한다.
  큰 규모의 객체는 필요에 따라 인터페이스로 잘게 나누어 확장성을 향상시킨다.
  
5. DIP(Dependency Inversion Principle): 의존관계 역전 원칙 - 구체적인 것이 추상화된 것에 의존해야 한다. 자주 변경되는 구체 클래스에 의존하지 마라.
  객체는 저수준 모듈보다 고수준 모듈에 의존해야 한다. 
    - 고수준 모듈 : 인터페이스와 같은 객체의 형태나 추상적 개념
    - 저수준 모듈 : 구현된 객체
    가급적 객체의 상속은 인터페이스를 통해 이루어져야 한다
   
  의존관계 역전 원칙은 코드의 확장성 및 재사용성을 추구하기 위한 원칙이다. 경직된 객체보다 구현되지 않아 유연한 인터페이스가 확장 가능성이 더 높다.
  또한, 이 원칙은  OCP와 SRP, ISP를 추구하면 자연스레 준수하게 된다.
