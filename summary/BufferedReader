 ++++++++++ 67강 Stream buffer ++++++++++
 
Buffer : 임시 저장공간
A창고에서 B창고로 물건을 옮길 때 B창고가 꽉 차는 경우 임시로 저장해놓는 공간(이후 B창고가 비게 되면 다시 채워넣는다)
Stream : 
수도꼭지에서 나온 물이 수도관을 통해 목적지에 도착, 
수도꼭지를 여는 순간 물의 흐름(Stream)이 생긴다.

프로그램에서는 전류의 흐름 -> 키보드로 타이핑 시 컴퓨터로 스트림이 생성

Stream은 데이터를 1Byte(8bit: 8자리)
A(부호) = 65(숫자 01000001) / B = 66 / C = 67
컴퓨터의 입장에서는 
 1. 65의 데이터가 input(입력)
 2. 65라는 데이터를 output(출력) / 이것을 I/O(input/output)
ASCII CODE(10진수를 부호화)로 분석하여 출력

InputStream in = System.in; (키보드로 값을 입력받는다)
(키보드 -> 컴퓨터 로 향하는 ByteStream)

try{
	int data = in.read(); //(in.read()는 2진수를 10진수로)
	System.out.println(data);
} catch(Exception e){
	e.printStackTrace();
}

system.in 으로 A를 입력하면 01000001 인코딩되어 ByteStream을 통해 컴퓨터로(input),
read() 메서드로 01000001 -> 65로 다시 디코딩
65를 문자로 부호화: (char)data

 ++++++++++ 68강 BufferedReader ++++++++++
 
A —— ByteStream ——> B
   A - 01000001 - 65

InputStreamReader ir = new InputStreamReader(in);
 -> 65를 A로 부호화 
but, 데이터를 가변적으로 받을 수 없음(데이터 낭비)

그래서 사용하는 것이
BufferdReader
 - 숫자 -> 부호화
 - 문자를 가변적으로 받음(배열의 공간낭비X)

InputStream in = System.in;
InputStreamReader ir = new InputStreamReader(in);
BufferedReader br = new Bufferedreader(ir);

try{
	String data = br.readLine();
	System.out.println(data);
} catch	(Exception e){
	System.oit.println(e.getMessage());	}

ByteStream -> br 이 됨
BufferedReader 의 특징(ex)
1. 양끝 단 버퍼의 크기를 맞춘다(3칸)
2. 버퍼가 가득 차면 자동 전송된다(flush)
	*자동전송의 조건 - 상대버퍼가 비워져있어야함(br.leadLine(); -> 상대버퍼에 있던 문자가 String으로 들어감)
3. 전송된 후에는 버퍼가 비워지고 그 자리에 나머지 데이터가 갱신된다.
  -> 문자를 가변적으로 받을 수 있다

출처 데어프로그래밍 자바 강의
