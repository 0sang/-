자바에서 기본 자료형(char 2Byte, int 4Byte 등)에는 값이 부여될 때 그 값 만큼의 메모리 공간에 저장된다.

String은 기본 자료형이 아닌 클래스이기 때문에 메모리에 주소를 갖는다.(char 배열)
String s1 = new String(“바다”);
String s2 = new String(“바다”);
둘 다 바다 라는 메시지가 출력되지만 s1 == s2 로 확인해보면
값이 다르다고(false) 나온다. 자바에서 == 는 주소값을 비교하기 때문이다.(예를 들어 1번지와 30번지)

유일하게 String에 대해서만 new를 사용하지 않고(객채/인스턴스를 생성하지 않고, heap메모리 할당X)
바로 초기화가 가능하게 만듦.(String을 많이 쓰기 때문에)

하지만 String s3 = “바다”; / String s4 = “바다”;
라고 저장하면 s3 == s4 의 값이 true가 나온다.

String 객체를 생성하지 않고 초기화 하면
String 상수 풀(String Constant Pool)의 같은 번지에 생성되기 때문에 같다고 나온다.

s3 = s3 + “태양” -> 바다태양
의 경우 상수풀의 새로운 공간이 만들어지고 s3는 이전과 다른 곳(새로 만들어진 주소값)을 바라보게 된다.
기존의 s3이 바라보던 공간은 쓰레기 수집 대상에 해당되어 가비지 컬렉션으로 간다. <- JVM의 가비지 컬렉터가 불필요한 메모리를 알아서 정리해준다.

장점 : 같은 문자열 사용 시 같은 공간을 공유하여 메모리 효율이 좋다.
단점 : 문자열이 변경될 때 마다 새로운 공간이 할당된다.
	-> 문자열이 자주 변경 될 때에는 사용하지 않는 것이 좋음

문자열을 비교 할 때는
s1.equals(“바다”) 를 사용해 문자열 값 자체와 주소 두가지 모두 비교해야 한다.

출처 데어자바 66강(String Constant Pool)
